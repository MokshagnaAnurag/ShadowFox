# -*- coding: utf-8 -*-
"""Store Sales and Profit Analysis using Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VY9Am2kV-sbN5K25-_gztIrhG0BnoBUC
"""

# Importing required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set seaborn style for better visualizations
sns.set(style="whitegrid")

# Importing necessary libraries
import pandas as pd
from google.colab import files

# Upload the dataset file
uploaded = files.upload()

# Read the uploaded dataset, specifying an encoding that handles non-UTF-8 files
df = pd.read_csv(list(uploaded.keys())[0], encoding='ISO-8859-1')  # You can change the encoding if necessary

# Display the first few rows of the dataset
df.head()

# Convert the 'Order Date' column to datetime format
df['Order Date'] = pd.to_datetime(df['Order Date'])

# Extract year, month, and day for further analysis
df['Year'] = df['Order Date'].dt.year
df['Month'] = df['Order Date'].dt.month
df['Day'] = df['Order Date'].dt.day

# Show dataset with new date columns
df.head()

# Check for missing values
print(df.isnull().sum())

# Handle missing values (if necessary)
# You can fill missing values, drop rows, or impute values depending on your data
df = df.dropna()

# Handle outliers (optional, depends on data)
# Example: removing extreme outliers in sales and profit using quantiles
Q1 = df['Sales'].quantile(0.25)
Q3 = df['Sales'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df = df[(df['Sales'] >= lower_bound) & (df['Sales'] <= upper_bound)]

# Group by year and month to get monthly sales
monthly_sales = df.groupby(['Year', 'Month'])['Sales'].sum().reset_index()

# Plot monthly sales trends
plt.figure(figsize=(10,6))
sns.lineplot(x='Month', y='Sales', hue='Year', data=monthly_sales, marker="o")
plt.title('Monthly Sales Trends')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.xticks(range(1,13))
plt.show()

# Group by Category to analyze the total sales by category
category_sales = df.groupby('Category')['Sales'].sum().reset_index()

# Plot sales by category
plt.figure(figsize=(8,6))
sns.barplot(x='Category', y='Sales', data=category_sales)
plt.title('Sales by Product Category')
plt.ylabel('Sales')
plt.show()

# Group by Sub-Category to analyze total sales
subcategory_sales = df.groupby('Sub-Category')['Sales'].sum().reset_index()

# Sort for better visualization
subcategory_sales = subcategory_sales.sort_values(by='Sales', ascending=False)

# Plot sales by sub-category
plt.figure(figsize=(12,6))
sns.barplot(x='Sub-Category', y='Sales', data=subcategory_sales)
plt.title('Sales by Product Sub-Category')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()

# Group by year and month to get monthly profit
monthly_profit = df.groupby(['Year', 'Month'])['Profit'].sum().reset_index()

# Plot monthly profit trends
plt.figure(figsize=(10,6))
sns.lineplot(x='Month', y='Profit', hue='Year', data=monthly_profit, marker="o")
plt.title('Monthly Profit Trends')
plt.xlabel('Month')
plt.ylabel('Profit')
plt.xticks(range(1,13))
plt.show()

# Group by Category to analyze total profit by category
category_profit = df.groupby('Category')['Profit'].sum().reset_index()

# Plot profit by category
plt.figure(figsize=(8,6))
sns.barplot(x='Category', y='Profit', data=category_profit)
plt.title('Profit by Product Category')
plt.ylabel('Profit')
plt.show()
